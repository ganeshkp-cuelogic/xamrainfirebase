{"Name":"Firebase Remote Config for iOS","Id":3418,"Alias":"firebaseiosremoteconfig","Description":"Change the behavior and appearance of your app without publishing an app update.\n\nFirebase Remote Config is a cloud service that lets you change the behavior and appearance of your app without requiring users to download an app update. When using Remote Config, you create in-app default values that control the behavior and appearance of your app. Then, you can later use the Firebase console to override in-app default values for all app users or for segments of your userbase. Your app controls when updates are applied, and it can frequently check for updates and apply them with a negligible impact on performance.\n\n## Key capabilities\n\n* **Quickly roll out changes to your app\u0027s userbase:** You can make changes to your app\u0027s default behavior and appearance by changing server-side parameter values. For example, you could change your app\u0027s layout or color theme to support a seasonal promotion, with no need to publish an app update.\n* **Customize your app for segments of your userbase:** You can use Remote Config to provide variations on your app\u0027s user experience to different segments of your userbase by app version, by Firebase Analytics audience, by language, and more.\n* **Run A/B tests to improve your app:** You can use Remote Config random percentile targeting with Firebase Analytics to A/B test improvements to your app across different segments of your userbase so that you can validate improvements before rolling them out to your entire userbase.\n\n## How does it work?\n\nRemote Config includes a client library that handles important tasks like fetching parameter values and caching them, while still giving you control over when new values are activated so that they affect your app\u0027s user experience. This lets you safeguard your app experience by controlling the timing of any changes.\n\nThe Remote Config client library get methods provide a single access point for parameter values. Your app gets server-side values using the same logic it uses to get in-app default values, so you can add the capabilities of Remote Config to your app without writing a lot of code.\n\nTo override in-app default values, you use the Firebase console to create parameters with the same names as the parameters used in your app. For each parameter, you can set a server-side default value to override the in-app default value, and you can also create conditional values to override the in-app default value for app instances that meet certain conditions.\n\n\u003csub\u003e_Portions of this page are modifications based on work created and [shared by Google](https://developers.google.com/readme/policies/) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/). Click [here](https://firebase.google.com/docs/remote-config/) to see original Firebase documentation._\u003c/sub\u003e","Version":"1.3.1.3","Summary":"Firebase Remote Config is a cloud service that lets you change the appearance and behavior of your app without requiring users to download an app update.","QuickStart":"# Use Firebase Remote Config on iOS\n\nYou can use Firebase Remote Config to define parameters in your app and update their values in the cloud, allowing you to modify the appearance and behavior of your app without distributing an app update.\n\n## Add Firebase to your app\n\n1. Create a Firebase project in the [Firebase console][1], if you don\u0027t already have one. If you already have an existing Google project associated with your mobile app, click **Import Google Project**. Otherwise, click **Create New Project**.\n2. Click **Add Firebase to your iOS app** and follow the setup steps. If you\u0027re importing an existing Google project, this may happen automatically and you can just [download the config file][2].\n3. When prompted, enter your app\u0027s bundle ID. It\u0027s important to enter the bundle ID your app is using; this can only be set when you add an app to your Firebase project.\n4. At the end, you\u0027ll download a `GoogleService-Info.plist` file. You can [download this file][2] again at any time.\n\n## Configure Remote Config in your app\n\nOnce you have your `GoogleService-Info.plist` file downloaded in your computer, do the following steps in Xamarin Studio:\n\n1. Add `GoogleService-Info.plist` file to your app project.\n2. Set `GoogleService-Info.plist` **build action** behaviour to `Bundle Resource` by Right clicking/Build Action.\n3. Add the following line of code somewhere in your app, typically in your AppDelegate\u0027s `FinishedLaunching` method (don\u0027t forget to import `Firebase.Analytics` namespace):\n\n```csharp\nApp.Configure ();\n```\n\n## Add Settings to Remote Config class\n\nCreate settings for `RemoteConfig` class, you can enable developer mode to allow for frequent refreshes of the cache (don\u0027t forget to import `Firebase.RemoteConfig` namespace):\n\n```csharp\n// Enabling developer mode, allows for frequent refreshes of the cache\nRemoteConfig.SharedInstance.ConfigSettings = new RemoteConfigSettings (true);\n```\n\n## Set in-app default parameter values\n\nYou can set in-app default parameter values in the Remote Config object, so that your app behaves as intended before it connects to the Remote Config Server, and so that default values are available if none are set on the server. You can achieve this with a **.plist** file or with an **NSDictionary** variable.\n\n### Set in-app default parameter values with .plist file\n\nIn your Xamarin Studio app project do the following steps to add default parameters with .plist file:\n\n1. In your project app name do Right click/Add/New File...\n2. In **New File** dialog, select iOS tab and choose Property List\n3. Name the Property List as you want and click **New**\n4. Change the **Build ACtion** of your just created file to **BundleResource** by Right clicking it/Build Action\n5. Open your **.plist** file and add all the parameters that you want.\n\nAfter you have setup all your default parameters, set the **.plist** to the `RemoteConfig` class:\n\n```csharp\nRemoteConfig.SharedInstance.SetDefaults (\"\u003cYour plist name here\u003e\");\n```\n\n### Set in-app default parameter values with a NSDictionary\n\nInstead of using a **.plist file** to load default parameter values to your app, you can create a `NSDictionary` to load them:\n\n```csharp\nobject [] values = { 5, 20 };\nobject [] keys = { \"times_table\", \"from_zero_to\" };\nvar defaultValues = NSDictionary.FromObjectsAndKeys (values, keys, keys.Length);\nRemoteConfig.SharedInstance.SetDefaults (defaultValues);\n```\n\n## Set parameter values in Firebase Console\n\n1. In the [Firebase console][1], open your project.\n2. Select **Remote Config** from the menu to view the Remote Config dashboard.\n3. Define parameters with the same names as the parameters that you defined in your **.plist** file or in your **NSDictionary**. For each parameter, you can set a default value (which will eventually override the in-app default value) and you can also set conditional values. To learn more, see [Remote Config Parameters and Conditions][3].\n\n## Fetch and activate values from the server\n\nAfter you have setup your parameter values in your app and in your server, you are ready to fetch those values in your app from the server so you can override your local values. Call `RemoteConfig.Fetch` instance method to retrieve values from server and call `RemoteConfig.ActivateFetched` instance method to make fetched parameter values available to your app:\n\n```csharp\n// CacheExpirationSeconds is set to CacheExpiration here, indicating that any previously\n// fetched and cached config would be considered expired because it would have been fetched\n// more than CacheExpiration seconds ago. Thus the next fetch would go to the server unless\n// throttling is in progress. The default expiration duration is 43200 (12 hours).\nRemoteConfig.SharedInstance.Fetch (10, (status, error) =\u003e {\n\tswitch (status) {\n\tcase RemoteConfigFetchStatus.Success:\n\t\tConsole.WriteLine (\"Config Fetched!\");\n\t\t\n\t\t// Call this method to make fetched parameter values available to your app\n\t\tRemoteConfig.SharedInstance.ActivateFetched ();\n\t\t\n\t\t// Update your UI from here\n\t\t...\n\t\tbreak;\n\n\tcase RemoteConfigFetchStatus.Throttled:\n\tcase RemoteConfigFetchStatus.NoFetchYet:\n\tcase RemoteConfigFetchStatus.Failure:\n\t\tConsole.WriteLine (\"Config not fetched...\");\n\t\tbreak;\n\t}\n});\n```\n\n## Use parameter values\n\nThe way you can use parameter values in your app is by calling `RemoteConfig.GetConfigValue` instance method or using `RemoteConfig` indexer method:\n\n```csharp\nvar myValue = RemoteConfig.SharedInstance [\"myKey\"].NumberValue;\nvar myOtherValue = RemoteConfig.SharedInstance.GetConfigValue (\"myOtherKey\").StringValue;\n```\n\n## Caching and throttling\n\nRemote Config caches values locally after the first successful request. By default the cache expires after 12 hours, but you can change the cache expiration for a specific request by passing the desired cache expiration, in seconds, to `Fetch` method. If the values in the cache are older than the desired cache expiration, Remote Config will request fresh config values from the server. If your app requests fresh values using `Fetch` several times, requests are throttled and your app is provided with a cached value.\n\nDuring app development, you might want to refresh the cache very frequently (many times per hour) to let you rapidly iterate as you develop and test your app. To accommodate rapid iteration on a project with up to 10 developers, you can temporarily add a `RemoteConfigSettings` property with `IsDeveloperModeEnabled` set to true to your app, changing the caching settings of the `RemoteConfig` object.\n\n### Known issues\n\n* App doesn\u0027t compile when `Incremental builds` is enabled. (Bug [#43689][4])\n\n\u003csub\u003e_Portions of this page are modifications based on work created and [shared by Google](https://developers.google.com/readme/policies/) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/). Click [here](https://firebase.google.com/docs/remote-config/use-config-ios) to see original Firebase documentation._\u003c/sub\u003e\n\n[1]: https://firebase.google.com/console/\n[2]: http://support.google.com/firebase/answer/7015592\n[3]: https://firebase.google.com/docs/remote-config/parameters\n[4]: https://bugzilla.xamarin.com/show_bug.cgi?id=43689\n","Hash":"8754591db33121cea0f87fb55947eb87","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}