{"Name":"HockeyApp for iOS (Crash Only)","Id":3496,"Alias":"hockeyappios-crashonly","Description":"HockeyApp is a platform to collect live crash reports, get feedback from your users, distribute your betas, recruit new testers, and analyze your test coverage.\n\nThe following features are currently supported:\n\n - **Collect crash reports:** If your app crashes, a crash log is written to the device\u0027s storage. If the user starts the app again, they will be asked asked to submit the crash report to HockeyApp. This works for both beta and live apps, i.e. those submitted to the App Store. Crash logs contain viable information for you to help resolve the issue. Furthermore, you as a developer can add additional information to the report as well.\n\n\nThis is the Crash Only version of HockeySDK for iOS.\n\n\n## Learn More\nLearn more about HockeyApp by visiting http://hockeyapp.net","Version":"4.1.4.0","Summary":"HockeyApp is a platform to collect live crash reports, get feedback from your users, distribute your betas, recruit new testers, and analyze your test coverage.","QuickStart":"# HockeySDK for Xamarin\n\n## Version 4.1.4\n- Please have a look at the [Changelog](https://github.com/bitstadium/HockeySDK-Xamarin/releases).\n- The Xamarin SDK wrapps our native SDKs, [HockeySDK-iOS 4.1.5](https://github.com/bitstadium/HockeySDK-iOS/releases/tag/4.1.5) and [HockeySDK-Android 4.1.4](https://github.com/bitstadium/HockeySDK-Android/releases/tag/4.1.4).\n\n- **If you are targeting iOS:** The HockeyApp Xamarin SDK includes the full version of the native HockeySDKs with all features. For iOS, this means that you must include the key `NSPhotoLibraryUsageDescription` in your app\u0027s `Info.plist` file - otherwise you risk an App Store rejection. Please read up on our blog on the [reason behind this change](https://www.hockeyapp.net/blog/2016/09/13/hockeysdk-ios-4-1-1-macos-tvos-4-1-0.html). This does not apply to the iOS CrashOnly variant of SDK, as this is not including the feedback feature.\n\n## Introduction\nHockeySDK-Xamarin implements support for HockeyApp in your iOS and Android applications.\nPlease have a look at the native platform SDKs [HockeySDK-iOS](https://github.com/bitstadium/HockeySDK-iOS) and [HockeySDK-Android](https://github.com/bitstadium/HockeySDK-Android) for advanced platform-specific behaviors.\n\nThe following features are currently supported:\n\n1. **Collect crash reports:** If your app crashes, a crash log is written to the device\u0027s storage. If the user starts the app again, they will be asked asked to submit the crash report to HockeyApp. This works for both beta and live apps, i.e. those submitted to the App Store. Crash logs contain viable information for you to help resolve the issue. Furthermore, you as a developer can add additional information to the report as well.\n\n2. **User Metrics:** Understand user behavior to improve your app. Track usage through daily and monthly active users. Monitor crash impacted users. Measure customer engagement through session count. You can also track custom events and view the aggregate results on the HockeyApp dashboard. On Android, this feature requires a minimum API level of 14 (Android 4.x Ice Cream Sandwich).\n\n3. **Update Ad-Hoc / Enterprise apps:** The app will check with HockeyApp if a new version for your Ad-Hoc or Enterprise build is available. If yes, it will show an alert view to the user and let him see the release notes, the version history and start the installation process right away.\n\n4. **Update notification for app store:** The app will check if a new version for your app store release is available. If yes, it will show an alert view to the user and let him open your app in the App Store app. (Disabled by default!)\n\n5. **Feedback:** Besides crash reports, collecting feedback from your users from within your app is a great option to help with improving your app. You act on and answer feedback directly from the HockeyApp backend.\n\n6. **Authenticate:** To help you stay in control of closed tester groups, you can identify and authenticate users against your registered testers with the HockeyApp backend. The authentication feature supports several ways of authentication.\n\nThis document contains the following sections:\n\n1. [Requirements](#requirements)\n2. [Setup](#setup)\n 1. [Obtain an App Identifier](#app-identifier)\n 2. [Integrate HockeySDK](#integrate-sdk)\n 3. [Add crash reporting](#crash-reporting)\n 4. [Add user metrics](#user-metrics)\n 5. [Add custom events](#custom-events)\n 6. [Add Update Distribution](#updated-distribution)\n 7. [Add in-app feedback](#feedback)\n 8. [Add authentication](#authentication)\n3. [Advanced setup](#advanced-setup)\n 1. [Adding App ID to manifest (Android-Only)](#appid-manifest)\n 2. [Permissions (Android-Only)](#permissions)\n 3. [Control output to LogCat](#logcat-output)\n 4. [Xamarin.Forms Project Integrate HockeySDK](#forms-integrate-sdk)\n4. [Documentation](#documentation)\n5. [Troubleshooting](#troubleshooting)\n6. [Contributing](#contributing)\n  1. [Code of Conduct](#codeofconduct)\n  2. [Contributor license](#contributor-license)\n7. [Contact](#contact)\n\n\n\u003ca id=\"requirements\"\u003e\u003c/a\u003e\n## 1. Requirements\n\n1. We assume that you have a project in Xamarin Studio or Xamarin for Visual Studio.\n2. We assume you are not using other crash-analytic services on the same mobile application simultaneously.\n\nCurrently, the following platforms are supported:\n\n - Xamarin.iOS\n - Xamarin.Android\n\n\n\u003ca id=\"setup\"\u003e\u003c/a\u003e\n## 2. Setup\n\n\u003ca id=\"app-identifier\"\u003e\u003c/a\u003e\n### 2.1 Obtain an App Identifier\n\nPlease see the \"[How to create a new app](http://support.hockeyapp.net/kb/about-general-faq/how-to-create-a-new-app)\" tutorial. This will provide you with an HockeyApp specific App Identifier to be used to initialize the SDK.\n\n\u003ca id=\"integrate-sdk\"\u003e\u003c/a\u003e\n### 2.2 Integrate the SDK\nFor each iOS and Android project desired, add the HockeySDK-Xamarin nuget package.\n\n#### For Xamarin Studio\n1. Navigate to `Project -\u003e Add NuGet Packages...`\n2. Search for `HockeySDK.Xamarin`\n\n#### For Xamarin for Visual Studio\n1. Navigate `Project -\u003e Manage NuGet Packages...`\n2. Search `HockeySDK.Xamarin`\n\n\u003ca id=\"crash-reporting\"\u003e\u003c/a\u003e\n### 2.3 Add crash reporting\nThis will add crash reporting capabilities to your app. Advanced ways to configure crash reporting are covered in advanced setup: [iOS](https://github.com/bitstadium/HockeySDK-iOS#advancedsetup) | [Android](https://github.com/bitstadium/HockeySDK-Android#advancedsetup)\n\n#### For iOS\n1. Open your `AppDelegate.cs` file.\n2. Add the following lines:\n\n```csharp\nusing HockeyApp.iOS;\n\nnamespace YourNameSpace {\n\n [Register(\"AppDelegate\")]\n public partial class AppDelegate : UIApplicationDelegate {\n \n  public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions) {\n   var manager = BITHockeyManager.SharedHockeyManager;\n   manager.Configure(\"$Your_App_Id\");\n   manager.StartManager();\n   manager.Authenticator.AuthenticateInstallation(); // This line is obsolete in crash only builds\n  }\n }\n}\n```\n\nPlease make sure to replace `$Your_App_Id` with the app identifier of your app, otherwise it will not work.\n\n#### For Android\n1. Open your `MainActivity.cs` file.\n2. Add the following lines:\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace {\n\n  [Activity(Label = \"Your.App\", MainLauncher = true, Icon = \"@mipmap/icon\")]\n  public class MainActivity : Activity {  \n   protected override void OnResume ()\n \t{\n \t  base.OnResume ();\n\t  CrashManager.Register(this, HOCKEYAPP_APPID);\n\t}\n  }\n}\n```\n\nPlease make sure to replace `$Your_App_Id` with the app identifier of your app, otherwise it will not work.\n\nWhen the app is resumed, the crash manager is triggered and checks if a new crash was created in a previous session. If yes, it presents a dialog to ask the user whether they want to send the crash log to HockeyApp. On app launch the crash manager registers a new exception handler to recognize app crashes.\n\n\u003ca id=\"user-metrics\"\u003e\u003c/a\u003e\n### 2.4 Add user metrics\nHockeyApp automatically provides you with nice, intelligible, and informative metrics about how your app is used and by whom.\n\n- **Sessions**: A new session is tracked by the SDK whenever the containing app is restarted (this refers to a \u0027cold start\u0027, i.e. when the app has not already been in memory prior to being launched) or whenever it becomes active again after having been in the background for 20 seconds or more.\n- **Users**: The SDK anonymously tracks the users of your app by creating a random UUID.\n- **Batching \u0026 offline behavior**: The SDK batches up to 50 events or waits for 15 seconds and then persists and sends the events, whichever comes first. So for sessions, this might actually mean, we send one single event per batch. If you are sending Custom Events, it can be 1 session event plus X of your Custom Events (up to 50 events per batch total). In case the device is offline, up to 50 batches (of up to 50 events) are stored until the SDK starts to reject and drop new events, logging an error.\n\n\n#### For iOS\n\nOn iOS, the random UUID ist securely stored in the keychain. On iOS, User Metrics is enabled by default. If you want to turn off User Metrics, please use the following code:\n\n```csharp\n// add the HockeyApp namespace\nusing HockeyApp.iOS;\n\n// in your FinishedLaunching-method add:\nvar manager = BITHockeyManager.SharedHockeyManager;\nmanager.Configure(\"$Your_App_Id\");\nmanager.DisableMetricsManager = true;\nmanager.StartManager();\n```\n\nIt is important that you set `DisableMetricsManager` before you start the manager.\n\n#### For Android\n\nOn Android, User Metrics is not automatically enabled, you have to start this explicitly yourself:\n\n```csharp\n// add the HockeyApp namespace\nusing HockeyApp.Android.Metrics;\n\n// in your main activity OnCreate-method add:\nMetricsManager.Register(Application, \"$Your_App_Id\");\n```\n\n\u003ca id=\"custom-events\"\u003e\u003c/a\u003e\n### 2.5 Add custom events\nHockeyApp allows you to track custom events to understand user actions inside your app.\n\nProperties and measurements added to Custom Events are available in Application Insights Analytics as a preview. Please have a look at the [public announcement](https://www.hockeyapp.net/blog/2016/08/30/custom-events-public-preview.html) to find out more. \n\n\n**Please note:** To use custom events, please first make sure that User Metrics is [set up correctly](#user-metrics) for your platform (e.g. you registered the MetricsManager on Android).\n\nTracking custom events on iOS and Android uses the same code:\n\n1. Make sure to add the correct namespace:\n  ```csharp\n  using HockeyApp;\n  using System.Collections.Generic;\n  ```\n\n2. Track custom events like this:\n  ```csharp\n  HockeyApp.MetricsManager.TrackEvent(\"Custom Event\");\n  ```\n  if you want to add custom properties or measurements, use this:\n\n  ```csharp\n  HockeyApp.MetricsManager.TrackEvent(\n    \"Custom Event\",\n    new Dictionary\u003cstring, string\u003e { { \"property\", \"value\" } },\n    new Dictionary\u003cstring, double\u003e { { \"time\", 1.0 } }\n  )\n  ```\n\n\u003ca id=\"updated-distribution\"\u003e\u003c/a\u003e\n### 2.6 Add Update Distribution\nThis will add the in-app update mechanism to your app. Detailed configuration options are in the advanced setup sections for each platform: [iOS](https://github.com/bitstadium/HockeySDK-iOS#advancedsetup) | [Android](https://github.com/bitstadium/HockeySDK-Android#advancedsetup)\n\n#### For iOS\nThe feature handles version updates, presents update and version information in an App Store like user interface, collects usage information and provides additional authorization options when using Ad-Hoc provisioning profiles.\n\nTo enable automatic in-app updates you need to make sure to add `manager.Authenticator.AuthenticateInstallation();` after starting the SDK:\n\n```csharp\nusing HockeyApp.iOS;\n\nvar manager = BITHockeyManager.SharedHockeyManager;\nmanager.Configure(\"$Your_App_Id\");\nmanager.StartManager();\nmanager.Authenticator.AuthenticateInstallation();\n```\n\n**Please note:** This module automatically disables itself when running in an App Store build by default.\n\nIf you manually want to disable the feature at some point, use this code:\n\n```csharp\nusing HockeyApp.iOS;\n\nvar manager = BITHockeyManager.SharedHockeyManager;\nmanager.Configure(\"$Your_App_Id\");\nmanager.DisableUpdateManager = true;\nmanager.StartManager();\nmanager.Authenticator.AuthenticateInstallation();\n```\n\nIf you want to see beta analytics, use the beta distribution feature with in-app updates, restrict versions to specific users. Or if you want to know who is actually testing your app, follow the instructions on our guide [Authenticating Users on iOS](https://support.hockeyapp.net/kb/client-integration-ios-mac-os-x-tvos/authenticating-users-on-ios).\n\n#### For Android\n\n1. Open the activity where you want to inform the user about eventual updates. Typically you want to do this on startup of your main activity.\n2. Add the following code and make sure to always balance `register(…)` calls to SDK managers with `unregister()` calls in the corresponding lifecycle callbacks:\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace {\n [Activity(Label = \"Your.App\", MainLauncher = true, Icon = \"@mipmap/icon\")]\n public class YourActivity : Activity {\n  protected override void OnCreate(Bundle savedInstanceState) {\n   base.OnCreate(savedInstanceState);\n   // Your own code to create the view\n   // ...\n    \n   CheckForUpdates();\n  }\n\n  private void CheckForUpdates() {\n   // Remove this for store builds!\n   UpdateManager.Register(this, \"$Your_App_Id\");\n  }\n  \n  private void UnregisterManagers() {\n   UpdateManager.Unregister();\n  }\n\n  protected override void OnPause() {\n   base.OnPause();\n   UnregisterManagers();\n  }\n  \n  protected override void OnDestroy() {\n   base.OnDestroy();\n   UnregisterManagers();\n  }\n }\n}\n```\n\nWhen the activity is created, the update manager checks for new updates in the background. If it finds a new update, an alert dialog will be shown. If the user presses `Show` in said dialog, they will be taken to the update activity. The reason to only do this once upon creation is that the update check causes network traffic and therefore potential costs for your users.\n\n\u003ca id=\"feedback\"\u003e\u003c/a\u003e\n### 2.7 Add in-app feedback\nThe feedback manager lets your users communicate directly with you via the app and an integrated user interface. It provides a single threaded discussion with a user running your app. Detailed configuration options are in the advanced setup sections for each platform: [iOS](https://github.com/bitstadium/HockeySDK-iOS#advancedsetup) | [Android](https://github.com/bitstadium/HockeySDK-Android#advancedsetup)\n\n1. You\u0027ll typically only want to show the feedback interface upon user interaction, for this example, we assume you have a button `feedbackButton` in your view for this.\n2. Add the following lines to your respective view controller/activity, handling the touch events and presenting the feedback interface:\n\n#### For iOS\n\nYou should never create your own instance of `BITFeedbackManager` but use the one provided by the `BITHockeyManager.sharedHockeyManager()`.\n\n```csharp\nusing HockeyApp.iOS;\n\nnamespace YourNameSpace {\n{\n\n\t[Register (\"AppDelegate\")]\n\tpublic partial class AppDelegate : UIApplicationDelegate\n\t{\n\n\t\tpublic override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions) {\n\t\t{\n\t\t\t// Initialise the Hockey SDK here\n \t\t\tvar manager = BITHockeyManager.SharedHockeyManager;\n\t\t\tmanager.Configure(\"$Your_App_Id\");\n\t\t\tmanager.StartManager();\n   \t\t\t\n\t\t\t// Create button and add action for click event\n\t\t\tvar app = new App ();\n   \t\t\tvar ShowFeedbackListViewButton = new Xamarin.Forms.Button {\n\t\t\t\tText = \"Show Feedback List View\"\n\t\t\t};\n\t\t\tShowFeedbackListViewButton.Clicked += ShowFeedbackList;\n\t\t\tapp.AddChild (ShowFeedbackListViewButton);\n   \t\t}\n   \t\t\n   \t\tprivate static void ShowFeedbackList(object sender, EventArgs e) {\n   \t\t\t// This is where the feedback form gets displayed\n\t\t\tvar feedbackManager = BITHockeyManager.SharedHockeyManager.FeedbackManager;\n\t\t\tfeedbackManager.ShowFeedbackListView ();\n\t\t}\n\t}\n}\t\n```\n\nPlease check the [documentation](#documentation) of the `BITFeedbackManager` class on more information on how to leverage this feature.\n\n#### For Android\n\n1. You\u0027ll typically only want to show the feedback interface upon user interaction, for this example we assume you have a button `feedback_button` in your view for this.\n2. Add the following lines to your respective activity, handling the touch events and showing the feedback interface:\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace {\n public class YourActivity : Activitiy {\n  protected override void OnCreate(Bundle savedInstanceState) {\n   base.OnCreate(savedInstanceState);\n   // Your own code to create the view\n   // ...\n\n   FeedbackManager.Register(this, \"$Your_App_Id\");\n\n   Button feedbackButton = FindViewById\u003cButton\u003e(Resource.Id.feedback_button);\n   feedbackButton.Click += delegate {\n     FeedbackManager.ShowFeedbackActivity(ApplicationContext);\n   });\n  }\n}\n```\n\nWhen the user taps on the feedback button, it will launch the feedback interface of the HockeySDK, where the user can create a new feedback discussion, add screenshots or other files for reference, and act on their previous feedback conversations.\n\n\u003ca id=\"authentication\"\u003e\u003c/a\u003e\n### 2.8 Add authentication\n#### For iOS\nInstructions for iOS Authentication can be found [here](https://support.hockeyapp.net/kb/client-integration-ios-mac-os-x-tvos/authenticating-users-on-ios).\n\n#### For Android\nYou can force authentication of your users through the `LoginManager` class. This will show a login screen to users if they are not fully authenticated to protect your app.\n\n1. Retrieve your app secret from the HockeyApp backend. You can find this on the app details page in the backend right next to the \"App ID\" value. Click \"Show\" to access it. \n2. Open the activity you want to protect, if you want to protect all of your app this will be your main activity.\n3. Add the following lines to this activity:\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace {\n [Activity(Label = \"Your.App\", MainLauncher = true, Icon = \"@mipmap/icon\")]\n public class YourActivity : Activity {\n  protected override void OnCreate(Bundle savedInstanceState) {\n   base.OnCreate(savedInstanceState);\n   // Your own code to create the view\n   // ...\n\n   LoginManager.Register(this, \"$APP_SECRET\", LoginManager.LOGIN_MODE_EMAIL_PASSWORD);\n   LoginManager.VerifyLogin(this, Intent);\n  }\n }\n}\n```\n\nMake sure to replace `$APP_SECRET` with the value retrieved in step 1. This will launch the login activity every time a user launches your app.\n\n\u003ca id=\"advanced-setup\"\u003e\u003c/a\u003e\n## 3. Advanced setup\n\n\u003ca id=\"appid-manifest\"\u003e\u003c/a\u003e\n### 3.1 Adding App ID to the Android Manifest (Android-Only)\n\nAdd the following assembly level attribute in `Properties/AssemblyInfo.cs`\n\n```csharp\n[assembly: MetaData (\"net.hockeyapp.android.appIdentifier\", Value=\"$Your_App_Id\")]\n```\n\nThis will allow you to set your App ID once and simplify register calls\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace\n{\n\t[Activity(Label = \"Your.App\", MainLauncher = true, Icon = \"@mipmap/icon\")]\n\tpublic class MainActivity : Activity \n\t{\n\t\tprotected override void OnCreate(Bundle savedInstanceState) \n\t\t{\n\t\t\tbase.OnCreate(savedInstanceState);\n\n\t\t\t// ... your own OnCreate implementation\n\t\t\tCrashManager.Register(this);\n\t\t}\n\t}\n}\n```\n\n\u003ca id=\"permissions\"\u003e\u003c/a\u003e\n### 3.2 Permissions (Android-Only)\nPermissions get automatically merged into your apps manifest. If your app does not use update distribution, you might consider removing the permission `WRITE_EXTERNAL_STORAGE` - see the [advanced permissions section](https://github.com/bitstadium/HockeySDK-Android#permissions-advanced) for details.\n\n\u003ca id=\"logcat-output\"\u003e\u003c/a\u003e\n### 3.3 Control output to the Console or LogCat\nYou can control the amount of log messages from HockeySDK that show up in LogCat. By default, we keep the noise as low as possible, only errors will show up. To enable additional logging, i.e. while debugging, add the following line of code:\n\n#### For iOS\n```csharp\nusing HockeyApp.iOS;\n\nvar manager = BITHockeyManager.SharedHockeyManager;\nmanager.LogLevel = BITLogLevel.Debug;\nmanager.Configure(\"$Your_App_Id\");\nmanager.StartManager();\n```\n\nThere are five different log levels in total which give you a more granular control over how much information the SDK outputs to the console.\n\n```csharp\nmanager.LogLevel = BITLogLevel.Verbose;\nmanager.LogLevel = BITLogLevel.Debug;\nmanager.LogLevel = BITLogLevel.Warning;\nmanager.LogLevel = BITLogLevel.Error;\nmanager.LogLevel = BITLogLevel.None;\n```\n\n#### For Android\n```csharp\nusing HockeyApp.Android.Utils;\n\nHockeyLog.LogLevel = 3;\n```\n\nThe different log levels match Android\u0027s own log levels.\n\n```csharp\nHockeyLog.LogLevel = 2; // Verbose, show all log statements\nHockeyLog.LogLevel = 3; // Debug, show most log statements – useful for debugging\nHockeyLog.LogLevel = 4; // Info, show informative or higher log messages\nHockeyLog.LogLevel = 5; // Warn, show warnings and errors\nHockeyLog.LogLevel = 6; // Error, show only errors – the default log level\n```\n\n\u003ca id=\"forms-integrate-sdk\"\u003e\u003c/a\u003e\n### 3.4 Xamarin.Forms Project Integrate HockeySDK\nWhen adding HockeySDK-Xamarin to a Xamarin.Forms PCL Solution, add the nuget to the PCL, iOS, and Android project (Windows phone is not currently supported).\n\nInitialization must be done in the individual iOS and Android projects as shown in [Integrate HockeySDK](#integrate-sdk). The PCL project will have access to a subset of shared non-configuration/initialization features.\n\nPlease refer to the Xamarin.Forms sample in `/samples/HockeyAppSampleForms.sln`.\n\n\u003ca id=\"documentation\"\u003e\u003c/a\u003e\n## 4. Documentation\nOur documentation can be found on [HockeyApp](https://hockeyapp.net/releases/) and the respective GitHub repositories of the platform SDKs: [iOS](https://github.com/bitstadium/HockeySDK-iOS) | [Android](https://github.com/bitstadium/HockeySDK-Android)\n\n\u003ca id=\"troubleshooting\"\u003e\u003c/a\u003e\n## 5. Troubleshooting\n1. Check if \"$Your_App_Id\" matches the App ID in HockeyApp.\n2. Check if the `Package name` in `Project Options-\u003eAndroid Application` file matches the Bundle Identifier of the app in HockeyApp. HockeyApp accepts crashes only if both the App ID and the bundle identifier match their corresponding values in your app. Please note that the package value in your `AndroidManifest.xml` file might differ from the bundle identifier, this is normal.\n3. If your app crashes and you start it again, does the dialog show up which asks the user to send the crash report? If not, please [enable logging](#logcat-output).\n4. If it still does not work, please [contact us](http://support.hockeyapp.net/discussion/new).\n\n\u003ca id=\"contributing\"\u003e\u003c/a\u003e\n## 6. Contributing\nWe\u0027re looking forward to your contributions via pull requests.\n\n\u003ca id=\"codeofconduct\"\u003e\u003c/a\u003e\n### 6.1 Code of Conduct\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n\u003ca id=\"contributor-license\"\u003e\u003c/a\u003e\n### 6.2 Contributor license\nYou must sign a [Contributor License Agreement](https://cla.microsoft.com/) before submitting your pull request. To complete the Contributor License Agreement (CLA), you will need to submit a request via the [form](https://cla.microsoft.com/) and then electronically sign the CLA when you receive the email containing the link to the document. You need to sign the CLA only once to cover submission to any Microsoft OSS project. \n\n\u003ca id=\"contact\"\u003e\u003c/a\u003e\n## 7. Contact\n\nIf you have further questions or are running into trouble that cannot be resolved by any of the steps here, feel free to open a GitHub issue here or contact us at [support@hockeyapp.net](mailto:support@hockeyapp.net) or in our [public Slack channel](https://slack.hockeyapp.net).\n\n## Building from Source\n\nBuild Prerequisites:\n\n - Mac OSX 10.12\n - Xamarin.Android\n - Xamarin.iOS\n - XCode 8\n \nThe file `build.cake` is the main build script used to compile the SDK source.  This script is running on the [Cake](http://cakebuild.net) build system. A `bootstrapper.sh` file is provided to execute the build without installing cake explicitly.\n\nYou can build the source including all samples, nuget packages and components by executing the following command:\n\n```\nsh ./bootstrapper.sh -t all\n```\n\nYou can alternatively execute the targets `libs`, `samples`, `nuget`, or `components` instead of `all`.\n\n## Components\n\nThe build script produces 3 separate components that are currently published on the [Xamarin Component Store](http://components.xamarin.com):\n\n - HockeyApp for iOS\n - HockeyApp for iOS (Crash Only)\n - HockeyApp for Android\n \n## NuGet\n\nThe build script produces a single NuGet package which contains binaries for and is installable on all the supported platforms. \n\n## License\n\nPlease see the `LICENSE.md` file for details.\n","Hash":"e1836efefdb70237d28b5a854689026a","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}